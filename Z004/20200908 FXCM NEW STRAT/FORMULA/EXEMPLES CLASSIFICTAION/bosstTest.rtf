{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red202\green202\blue202;\red23\green23\blue23;\red202\green202\blue202;
\red255\green255\blue255;\red0\green0\blue0;\red183\green111\blue179;\red167\green197\blue152;\red194\green126\blue101;
\red89\green138\blue67;\red212\green214\blue154;\red23\green23\blue23;\red89\green138\blue67;\red183\green111\blue179;
\red140\green211\blue254;\red167\green197\blue152;\red194\green126\blue101;\red212\green214\blue154;\red70\green137\blue204;
\red67\green192\blue160;}
{\*\expandedcolortbl;;\cssrgb\c83137\c83137\c83137;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;\cssrgb\c77255\c52549\c75294;\cssrgb\c70980\c80784\c65882;\cssrgb\c80784\c56863\c47059;
\cssrgb\c41569\c60000\c33333;\cssrgb\c86275\c86275\c66667;\cssrgb\c11765\c11765\c11765;\cssrgb\c41569\c60000\c33333;\cssrgb\c77255\c52549\c75294;
\cssrgb\c61176\c86275\c99608;\cssrgb\c70980\c80784\c65882;\cssrgb\c80784\c56863\c47059;\cssrgb\c86275\c86275\c66667;\cssrgb\c33725\c61176\c83922;
\cssrgb\c30588\c78824\c69020;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 test Boost Classifier\
\
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
&lt;class 'pandas.core.frame.DataFrame'&gt;\
RangeIndex: 750678 entries, 0 to 750677\
Data columns (total 24 columns):\
 #   Column      Non-Null Count   Dtype  \
---  ------      --------------   -----  \
 0   OpenBid     750678 non-null  float64\
 1   HighBid     750678 non-null  float64\
 2   LowBid      750678 non-null  float64\
 3   CloseBid    750678 non-null  float64\
 4   OpenAsk     750678 non-null  float64\
 5   HighAsk     750678 non-null  float64\
 6   LowAsk      750678 non-null  float64\
 7   CloseAsk    750678 non-null  float64\
 8   Total       750678 non-null  int64  \
 9   Open        750678 non-null  float64\
 10  High        750678 non-null  float64\
 11  Low         750678 non-null  float64\
 12  Close       750678 non-null  float64\
 13  MM21        750678 non-null  float64\
 14  RSI14       750678 non-null  float64\
 15  BOLUP       750678 non-null  float64\
 16  BOLMID      750678 non-null  float64\
 17  BOLLOW      750678 non-null  float64\
 18  FastK       750678 non-null  float64\
 19  FastD       750678 non-null  float64\
 20  STOCHSlowk  750678 non-null  float64\
 21  STOCHSlowd  750678 non-null  float64\
 22  ATR         750678 non-null  float64\
 23  DeltaATR    750678 non-null  float64\
dtypes: float64(23), int64(1)\
memory usage: 137.5 MB\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\
\pard\pardeftab720\sl360\partightenfactor0

\f2 \cf4 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 %%\cf6 \strokec6 time\cb1 \
\cf7 \cb5 \strokec7 from\cf6 \strokec6 \'a0collections\'a0\cf7 \strokec7 import\cf6 \strokec6 \'a0Counter\cb1 \
\cf7 \cb5 \strokec7 from\cf6 \strokec6 \'a0matplotlib\'a0\cf7 \strokec7 import\cf6 \strokec6 \'a0pyplot\'a0\cf7 \strokec7 as\cf6 \strokec6 \'a0plt\cb1 \
\cf7 \cb5 \strokec7 import\cf6 \strokec6 \'a0numpy\'a0\cf7 \strokec7 as\cf6 \strokec6 \'a0np\cb1 \
\cb5 X\'a0\cf4 \strokec4 =\cf6 \strokec6 \'a0df_abs.iloc[:,:\cf4 \strokec4 -\cf8 \strokec8 1\cf6 \strokec6 ]\cb1 \
\cb5 y\'a0\cf4 \strokec4 =\cf6 \strokec6 \'a0df_abs[\cf9 \strokec9 'Signal'\cf6 \strokec6 ]\cb1 \
\cf10 \cb5 \strokec10 #\'a0summarize\'a0class\'a0distribution\cf6 \cb1 \strokec6 \
\cb5 counter\'a0\cf4 \strokec4 =\cf6 \strokec6 \'a0Counter(y)\cb1 \
\cf11 \cb5 \strokec11 print\cf6 \strokec6 (counter)\cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
\
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf4 \cb12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Counter(\{0: 746369, 1: 4309\})\
CPU times: user 144 ms, sys: 40.6 ms, total: 184 ms\
Wall time: 184 ms
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
0.5% de signaux \
\
\pard\pardeftab720\sl360\partightenfactor0

\f2 \cf13 \cb5 \expnd0\expndtw0\kerning0
#\'a0fit\'a0balanced\'a0xgboost\'a0on\'a0an\'a0imbalanced\'a0classification\'a0dataset\cf6 \cb1 \
\cf14 \cb5 from\cf6 \'a0numpy\'a0\cf14 import\cf6 \'a0mean\cb1 \
\cf14 \cb5 from\cf6 \'a0sklearn.datasets\'a0\cf14 import\cf6 \'a0make_classification\cb1 \
\cf14 \cb5 from\cf6 \'a0sklearn.model_selection\'a0\cf14 import\cf6 \'a0cross_val_score\cb1 \
\cf14 \cb5 from\cf6 \'a0sklearn.model_selection\'a0\cf14 import\cf6 \'a0RepeatedStratifiedKFold\cb1 \
\cf14 \cb5 from\cf6 \'a0xgboost\'a0\cf14 import\cf6 \'a0XGBClassifier\cb1 \
\
\cf13 \cb5 #\'a0define\'a0model\cf6 \cb1 \
\cb5 model\'a0\cf2 =\cf6 \'a0XGBClassifier(\cf15 scale_pos_weight\cf2 =\cf16 99\cf6 )\cb1 \
\cf13 \cb5 #\'a0define\'a0evaluation\'a0procedure\cf6 \cb1 \
\cb5 cv\'a0\cf2 =\cf6 \'a0RepeatedStratifiedKFold(\cf15 n_splits\cf2 =\cf16 10\cf6 ,\'a0\cf15 n_repeats\cf2 =\cf16 3\cf6 ,\'a0\cf15 random_state\cf2 =\cf16 1\cf6 )\cb1 \
\cf13 \cb5 #\'a0evaluate\'a0model\cf6 \cb1 \
\cb5 scores\'a0\cf2 =\cf6 \'a0cross_val_score(model,\'a0X,\'a0y,\'a0\cf15 scoring\cf2 =\cf17 'roc_auc'\cf6 ,\'a0\cf15 cv\cf2 =\cf6 cv,\'a0\cf15 n_jobs\cf2 =-\cf16 1\cf6 )\cb1 \
\cf13 \cb5 #\'a0summarize\'a0performance\cf6 \cb1 \
\cf18 \cb5 print\cf6 (\cf17 'Mean\'a0ROC\'a0AUC:\'a0\cf19 %.5f\cf17 '\cf6 \'a0\cf2 %\cf6 \'a0mean(scores))\cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf2 \cb3 \expnd0\expndtw0\kerning0
Mean ROC AUC: 0.96925\
CPU times: user 807 ms, sys: 450 ms, total: 1.26 s\
Wall time: 21min 35s
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\sl360\partightenfactor0

\f2 \cf14 \cb5 \expnd0\expndtw0\kerning0
from\cf6 \'a0numpy\'a0\cf14 import\cf6 \'a0mean\cb1 \
\cf14 \cb5 from\cf6 \'a0sklearn.datasets\'a0\cf14 import\cf6 \'a0make_classification\cb1 \
\cf14 \cb5 from\cf6 \'a0sklearn.model_selection\'a0\cf14 import\cf6 \'a0GridSearchCV\cb1 \
\cf14 \cb5 from\cf6 \'a0sklearn.model_selection\'a0\cf14 import\cf6 \'a0RepeatedStratifiedKFold\cb1 \
\cf14 \cb5 from\cf6 \'a0xgboost\'a0\cf14 import\cf6 \'a0XGBClassifier\cb1 \
\cf13 \cb5 #\'a0define\'a0model\cf6 \cb1 \
\cb5 model\'a0\cf2 =\cf6 \'a0XGBClassifier()\cb1 \
\cf13 \cb5 #\'a0define\'a0grid\cf6 \cb1 \
\cb5 weights\'a0\cf2 =\cf6 \'a0[\cf16 1\cf6 ,\'a0\cf16 10\cf6 ,\'a0\cf16 25\cf6 ,\'a0\cf16 50\cf6 ,\'a0\cf16 75\cf6 ,\'a0\cf16 99\cf6 ,\'a0\cf16 100\cf6 ,\'a0\cf16 1000\cf6 ]\cb1 \
\cb5 param_grid\'a0\cf2 =\cf6 \'a0\cf20 dict\cf6 (\cf15 scale_pos_weight\cf2 =\cf6 weights)\cb1 \
\cf13 \cb5 #\'a0define\'a0evaluation\'a0procedure\cf6 \cb1 \
\cb5 cv\'a0\cf2 =\cf6 \'a0RepeatedStratifiedKFold(\cf15 n_splits\cf2 =\cf16 10\cf6 ,\'a0\cf15 n_repeats\cf2 =\cf16 3\cf6 ,\'a0\cf15 random_state\cf2 =\cf16 1\cf6 )\cb1 \
\cf13 \cb5 #\'a0define\'a0grid\'a0search\cf6 \cb1 \
\cb5 grid\'a0\cf2 =\cf6 \'a0GridSearchCV(\cf15 estimator\cf2 =\cf6 model,\'a0\cf15 param_grid\cf2 =\cf6 param_grid,\'a0\cf15 n_jobs\cf2 =-\cf16 1\cf6 ,\'a0\cf15 cv\cf2 =\cf6 cv,\'a0\cf15 scoring\cf2 =\cf17 'roc_auc'\cf6 )\cb1 \
\cf13 \cb5 #\'a0execute\'a0the\'a0grid\'a0search\cf6 \cb1 \
\cb5 grid_result\'a0\cf2 =\cf6 \'a0grid.fit(X,\'a0y)\cb1 \
\cf13 \cb5 #\'a0report\'a0the\'a0best\'a0configuration\cf6 \cb1 \
\cf18 \cb5 print\cf6 (\cf17 "Best:\'a0\cf19 %f\cf17 \'a0using\'a0\cf19 %s\cf17 "\cf6 \'a0\cf2 %\cf6 \'a0(grid_result.best_score_,\'a0grid_result.best_params_))\cb1 \
\cf13 \cb5 #\'a0report\'a0all\'a0configurations\cf6 \cb1 \
\cb5 means\'a0\cf2 =\cf6 \'a0grid_result.cv_results_[\cf17 'mean_test_score'\cf6 ]\cb1 \
\cb5 stds\'a0\cf2 =\cf6 \'a0grid_result.cv_results_[\cf17 'std_test_score'\cf6 ]\cb1 \
\cb5 params\'a0\cf2 =\cf6 \'a0grid_result.cv_results_[\cf17 'params'\cf6 ]\cb1 \
\cf14 \cb5 for\cf6 \'a0mean,\'a0stdev,\'a0param\'a0\cf14 in\cf6 \'a0\cf18 zip\cf6 (means,\'a0stds,\'a0params):\cb1 \
\cb5 \'a0\'a0\'a0\'a0\cf18 print\cf6 (\cf17 "\cf19 %f\cf17 \'a0(\cf19 %f\cf17 )\'a0with:\'a0\cf19 %r\cf17 "\cf6 \'a0\cf2 %\cf6 \'a0(mean,\'a0stdev,\'a0param))\cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \
\
\
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf2 \cb3 \expnd0\expndtw0\kerning0
Best: 0.969247 using \{'scale_pos_weight': 99\}\
0.965832 (0.001548) with: \{'scale_pos_weight': 1\}\
0.967703 (0.001445) with: \{'scale_pos_weight': 10\}\
0.968321 (0.001510) with: \{'scale_pos_weight': 25\}\
0.968788 (0.001454) with: \{'scale_pos_weight': 50\}\
0.969066 (0.001437) with: \{'scale_pos_weight': 75\}\
0.969247 (0.001400) with: \{'scale_pos_weight': 99\}\
0.969187 (0.001384) with: \{'scale_pos_weight': 100\}\
0.968964 (0.001268) with: \{'scale_pos_weight': 1000\}\
CPU times: user 2min 57s, sys: 1.7 s, total: 2min 59s\
Wall time: 2h 52min 49s
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
}