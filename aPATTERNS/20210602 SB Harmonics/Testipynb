{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python385jvsc74a57bd07f9c69b77f8cb78a9d8b8acc2d09c3972908e6673afd8bfd04ee2f6acaaac495",
   "display_name": "Python 3.8.5 64-bit (conda)"
  },
  "metadata": {
   "interpreter": {
    "hash": "7f9c69b77f8cb78a9d8b8acc2d09c3972908e6673afd8bfd04ee2f6acaaac495"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "Global Optimized LumberJack Environment Motor for For_Ex\n",
      "LumberJack Jyss 5781(c)\n",
      "\u001b[36m °0Oo_D.A.G._26_oO0°\n",
      "\u001b[33m \u001b[44m --- Golem Harmo FXCM m15 #v1.0 --- \u001b[0m\n",
      "\n",
      "\u001b[32mConnexion établie\u001b[0m\n",
      "Compte utilisé :  [1294950]\n",
      "\n",
      "\n",
      "Decay =  2 \n",
      "\n",
      "Attente de la nouvelle bougie - Mise en veille - Heure locale : 2021-06-07 20:12:02.806220"
     ]
    },
    {
     "output_type": "error",
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-2b5cacccd645>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m    397\u001b[0m     \u001b[0;32mwhile\u001b[0m \u001b[0mdt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdatetime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mminute\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m15\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m30\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m45\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    398\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'\\rAttente de la nouvelle bougie - Mise en veille - Heure locale :'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdatetime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mend\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m''\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mflush\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 399\u001b[0;31m         \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    400\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    401\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/DataSciences/lib/python3.8/site-packages/socketio/client.py\u001b[0m in \u001b[0;36msignal_handler\u001b[0;34m(sig, frame)\u001b[0m\n\u001b[1;32m     24\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mclient\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mreconnecting_clients\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m         \u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reconnect_abort\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 26\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0moriginal_signal_handler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mframe\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     27\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/DataSciences/lib/python3.8/site-packages/engineio/client.py\u001b[0m in \u001b[0;36msignal_handler\u001b[0;34m(sig, frame)\u001b[0m\n\u001b[1;32m     39\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m             \u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdisconnect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mabort\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0moriginal_signal_handler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mframe\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "__author__ = 'LumberJack'\n",
    "__copyright__ = 'D.A.G. 26 - 5781'\n",
    "__version__ = 'v1.0'\n",
    "\n",
    "####################################################################\n",
    "####################################################################\n",
    "########################### GOLEM HAROMNICS ########################\n",
    "####################################################################\n",
    "####################################################################\n",
    "\n",
    "'''\n",
    "In this version, Go!em is scanning the market and is looking for harmonics. If found, it sends them on its telegram\n",
    "'''\n",
    "\n",
    "## Librairies\n",
    "import datetime as dt\n",
    "import time\n",
    "import joblib\n",
    "import sys\n",
    "import fxcmpy\n",
    "import colorama as col\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from tqdm import tqdm\n",
    "import talib\n",
    "from scipy.signal import argrelextrema\n",
    "import mplfinance as fplt\n",
    "import requests\n",
    "import json\n",
    "import os\n",
    "sys.path.append('../') \n",
    "\n",
    "## Paramètres\n",
    "#TICKER_LIST = ['EUR/USD','USD/JPY','GBP/USD','USD/CHF','EUR/CHF','AUD/USD','USD/CAD','NZD/USD','EUR/GBP','EUR/JPY','GBP/JPY','CHF/JPY','GBP/CHF','EUR/AUD','EUR/CAD','AUD/CAD','AUD/JPY','CAD/JPY','NZD/JPY','GBP/CAD','GBP/NZD','GBP/AUD','AUD/NZD','USD/SEK','EUR/SEK','EUR/NOK','USD/NOK','USD/MXN','AUD/CHF','EUR/NZD','USD/ZAR','ZAR/JPY','NZD/CHF','CAD/CHF','NZD/CAD','USD/CNH','US30','WHEATF','XAU/USD','XAG/USD']\n",
    "err_allowed = 10/100\n",
    "_period = 'm15'\n",
    "_token = joblib.load('TOKENS/_api_token.dag')\n",
    "_bot_token = joblib.load('TOKENS/telegram_token.dag')\n",
    "_chat_id = joblib.load('TOKENS/telegram_chat_id.dag')\n",
    "_server = 'demo'\n",
    "_number = 500\n",
    "_lookback = 1\n",
    "_con = None\n",
    "## Fontions\n",
    "\n",
    "# Envoi message texte\n",
    "def telegram_message(_message):\n",
    "    message = 'https://api.telegram.org/bot'+ _bot_token +  '/sendMessage?chat_id=' + _chat_id+ '&parse_mode=Markdown&text=' + _message\n",
    "    send = requests.post(message)\n",
    "\n",
    "# Envoi image\n",
    "def telegram_pic(_pic):\n",
    "    files = {'photo': open(_pic, 'rb')}\n",
    "    message = ('https://api.telegram.org/bot'+ _bot_token + '/sendPhoto?chat_id=' + _chat_id)\n",
    "    send = requests.post(message, files = files)\n",
    "\n",
    "# Réduit la dataframe à OHLC\n",
    "def reduce_df(df):\n",
    "    df = df[['Close','CloseAsk','CloseBid','High','HighAsk','HighBid','Low','LowAsk','LowBid','Open','OpenAsk','OpenBid','Symbol','Date']]\n",
    "    return(df)\n",
    "\n",
    "# Vérifie la présence de we\n",
    "def is_we(dataframe_to_check):\n",
    "    IDX = dataframe_to_check.index.to_list()\n",
    "    c=0\n",
    "    for day in IDX:\n",
    "        if day.weekday() == 5 or day.weekday() == 6:\n",
    "            c += 1\n",
    "    print('Nombre de samedi et dimanches présents :',c)\n",
    "\n",
    "# Drop les lignes appartenant à un we\n",
    "def drop_we(df):\n",
    "    df['WE'] = np.where(((df.index.weekday == 5) | (df.index.weekday == 6)),None,df.index.weekday)\n",
    "    df = df.dropna()\n",
    "    df = df.drop(['WE'],axis=1)\n",
    "    return(df)\n",
    "\n",
    "# Met à jour la base\n",
    "def maj(df, con,_tf,_decay=0):\n",
    "    \n",
    "    _fin = dt.datetime.now()\n",
    "    _deb = df.index[-1]\n",
    "    _debut = dt.datetime(_deb.year,_deb.month,_deb.day,_deb.hour,_deb.minute)\n",
    "    # Scrap the addon & build it to be compliant with our df\n",
    "    addon = get_candl(con,_debut, _fin,_tf)\n",
    "    # Calculate the mid prices\n",
    "\n",
    "    addon = make_mid(addon)\n",
    "    addon = drop_we(addon)\n",
    "    addon = make_mid(addon)\n",
    "    addon['Symbol'] = _ticker\n",
    "    addon['Date'] = addon.index\n",
    "    addon['Date'] = pd.to_datetime(addon['Date'].dt.strftime(date_format='%Y-%m-%d'))\n",
    "\n",
    "    # Concatenate the bases\n",
    "    df = df.append(addon.iloc[1:,:])\n",
    "    #df = df.iloc[-263570:,:]\n",
    "    if _tf == 'm5':\n",
    "        if (dt.datetime.now().minute - df.index[-1].minute <= 5) : # or ((dt.datetime.now().minute - df.index[-1].minute == -55)) :\n",
    "            df = df.iloc[:-1,:]\n",
    "            print('Cut en m5 - Dernière bougie _period récupérée :',df.index[-1])\n",
    "        else :\n",
    "            print('No Cut en m5 - Dernière bougie _period récupérée :',df.index[-1])\n",
    "\n",
    "    elif _tf == 'm15':\n",
    "        if (dt.datetime.now().minute - df.index[-1].minute <= 15) : # or ((dt.datetime.now().minute - df.index[-1].minute == -55)) :\n",
    "            df = df.iloc[:-1,:]\n",
    "            print('Cut en m15 - Dernière bougie _period récupérée :',df.index[-1])\n",
    "        else :\n",
    "            print('No Cut en m15 - Dernière bougie _period récupérée :',df.index[-1])\n",
    "\n",
    "    elif _tf == 'm30':\n",
    "        if (dt.datetime.now().minute - df.index[-1].minute <= 30) : # or ((dt.datetime.now().minute - df.index[-1].minute == -55)) :\n",
    "            df = df.iloc[:-1,:]\n",
    "            print('Cut en m30 - Dernière bougie _period récupérée :',df.index[-1])\n",
    "        else :\n",
    "            print('No Cut en m30 - Dernière bougie _period récupérée :',df.index[-1])\n",
    "    \n",
    "    if _tf == 'H1' :\n",
    "        if dt.datetime.now().hour - df.index[-1].hour == _decay :\n",
    "            df = df.iloc[:-1,:]\n",
    "            print('Cut en H1 - Dernière bougie _period récupérée :',df.index[-1])\n",
    "    \n",
    "    if _tf == 'H4' :\n",
    "        if dt.datetime.now().hour - df.index[-1].hour == 4 + _decay :\n",
    "            df = df.iloc[:-1,:]\n",
    "            print('Cut en H4 - Dernière bougie _period récupérée :',df.index[-1])\n",
    "    \n",
    "        else :\n",
    "            print('No Cut en H4 - Dernière bougie _period récupérée :',df.index[-1])\n",
    "    return(df)\n",
    "\n",
    "# Calcul les valeurs mid à partir des Bid/Ask\n",
    "def make_mid(df):\n",
    "    df['Open'] = (df.OpenAsk + df.OpenBid)/2\n",
    "    df['High'] = (df.HighAsk + df.HighBid)/2\n",
    "    df['Low'] = (df.LowAsk + df.LowBid)/2\n",
    "    df['Close'] = (df.CloseAsk + df.CloseBid)/2\n",
    "    df['Symbol'] = _ticker\n",
    "    df['Date'] = df.index\n",
    "    df['Date'] = pd.to_datetime(df['Date'].dt.strftime(date_format='%Y-%m-%d'))\n",
    "    df = drop_we(df)\n",
    "    return(df)\n",
    "\n",
    "# Récupère les boudies fxcm\n",
    "def get_candl(con,x,_tf,_number=200):\n",
    "    df = con.get_candles(x,period=_tf,number=_number).drop(['tickqty'],axis=1)\n",
    "    df = df.rename(columns={'bidopen':'OpenBid','bidclose':'CloseBid','bidhigh':'HighBid','bidlow':'LowBid','askopen':'OpenAsk','askclose':'CloseAsk','askhigh':'HighAsk','asklow':'LowAsk'})\n",
    "    return(df)\n",
    "\n",
    "# Connexion à fxcm\n",
    "def conX(con,_token,_server):\n",
    "    #global con\n",
    "    try:\n",
    "        con.is_connected()\n",
    "        if con.is_connected() == True:\n",
    "            print('Déjà connecté')\n",
    "            print('')\n",
    "        else:\n",
    "            con = fxcmpy.fxcmpy(access_token=_token, log_level='error',server=_server)\n",
    "            print(col.Fore.GREEN+'Connexion établie'+col.Style.RESET_ALL)\n",
    "            print('Compte utilisé : ',con.get_account_ids())\n",
    "            print('')\n",
    "    except:\n",
    "        con = fxcmpy.fxcmpy(access_token=_token, log_level='error',server=_server)\n",
    "        if con.is_connected() == True:\n",
    "            print(col.Fore.GREEN+'Connexion établie'+col.Style.RESET_ALL)\n",
    "            print('Compte utilisé : ',con.get_account_ids())\n",
    "            print('')\n",
    "        else:\n",
    "            print(col.Fore.RED+'Connexion non établie'+col.Style.RESET_ALL)\n",
    "            print('')\n",
    "    return(con)\n",
    "\n",
    "# Detection des peaks / valleys\n",
    "def peak_detect(high,low,order=10):\n",
    "    #print('price.shape',price.shape)\n",
    "    max_idx = list(argrelextrema(high,np.greater,order=order)[0])\n",
    "    #print('max_idx shape',len(max_idx))\n",
    "    min_idx = list(argrelextrema(low,np.less,order=order)[0])\n",
    "    #print('min_idx shape',len(min_idx))\n",
    "    idx = max_idx + min_idx\n",
    "    #print('idx shape',len(idx))\n",
    "    idx.sort()\n",
    "    CURRENT = []\n",
    "    for i in idx:\n",
    "        if i in max_idx:\n",
    "            CURRENT.append(high[i])\n",
    "        else:\n",
    "            CURRENT.append(low[i])\n",
    "\n",
    "\n",
    "    if idx[-1] in max_idx:\n",
    "        CURRENT.append(low[len(high)-1])\n",
    "\n",
    "    else:\n",
    "        CURRENT.append(high[len(low)-1])\n",
    "    \n",
    "    CURRENT = CURRENT[-5:]\n",
    "    _current_idx = idx[-4:] + [len(high)-1]\n",
    "    #print('current_idx shape',len(current_idx))\n",
    "    _start = min(_current_idx)\n",
    "    _end = max(_current_idx)\n",
    "    return _current_idx,CURRENT,_start,_end \n",
    "\n",
    "# Detection des Gartley\n",
    "def is_gartley(moves,err_allowed):  \n",
    "    XA=moves[0]\n",
    "    AB=moves[1]\n",
    "    BC=moves[2]\n",
    "    CD=moves[3]\n",
    "   \n",
    "    AB_range = np.array([0.618 - err_allowed,0.618 + err_allowed])*abs(XA)\n",
    "    BC_range = np.array([0.382 - err_allowed,0.886 + err_allowed])*abs(AB)\n",
    "    CD_range = np.array([1.27 - err_allowed,1.618 + err_allowed])*abs(BC)\n",
    "        \n",
    "    if XA>0 and AB<0 and BC>0 and CD<0:\n",
    "        if AB_range[0]<abs(AB)<AB_range[1] and BC_range[0]<abs(BC)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1]:\n",
    "            return 1\n",
    "        else:\n",
    "            return np.isnan\n",
    "        \n",
    "    elif XA<0 and AB>0 and BC<0 and CD>0:\n",
    "        if AB_range[0]<abs(AB)<AB_range[1] and BC_range[0]<abs(BC)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1]:\n",
    "            return -1\n",
    "        else:\n",
    "            return np.isnan\n",
    "    else:\n",
    "        return np.isnan\n",
    "\n",
    "# Detection des Butterfly\n",
    "def is_butterfly(moves,err_allowed):   \n",
    "    XA=moves[0]\n",
    "    AB=moves[1]\n",
    "    BC=moves[2]\n",
    "    CD=moves[3]\n",
    "    \n",
    "    AB_range = np.array([0.786 - err_allowed,0.786 + err_allowed])*abs(XA)\n",
    "    BC_range = np.array([0.382 - err_allowed,0.886 + err_allowed])*abs(AB)\n",
    "    CD_range = np.array([1.618 - err_allowed,2.618 + err_allowed])*abs(BC)\n",
    "        \n",
    "    if XA>0 and AB<0 and BC>0 and CD<0:\n",
    "        if AB_range[0]<abs(AB)<AB_range[1] and BC_range[0]<abs(BC)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1]:\n",
    "            return 1\n",
    "        else:\n",
    "            return np.NaN\n",
    "        \n",
    "    elif XA<0 and AB>0 and BC<0 and CD>0:      \n",
    "        if AB_range[0]<abs(AB)<AB_range[1] and BC_range[0]<abs(BC)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1]:\n",
    "            return -1\n",
    "        else:\n",
    "            return np.isnan\n",
    "    else:\n",
    "        return np.isnan       \n",
    "\n",
    "# Detection des Crab\n",
    "def is_crab(moves,err_allowed):      \n",
    "    XA=moves[0]\n",
    "    AB=moves[1]\n",
    "    BC=moves[2]\n",
    "    CD=moves[3]\n",
    "    \n",
    "    AB_range = np.array([0.382 - err_allowed,0.618 + err_allowed])*abs(XA)\n",
    "    BC_range = np.array([0.382 - err_allowed,0.886 + err_allowed])*abs(AB)\n",
    "    CD_range = np.array([2.24 - err_allowed,3.618 + err_allowed])*abs(BC)\n",
    "           \n",
    "    if XA>0 and AB<0 and BC>0 and CD<0:\n",
    "        if AB_range[0]<abs(AB)<AB_range[1] and BC_range[0]<abs(BC)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1]:\n",
    "            return 1\n",
    "        else:\n",
    "            return np.NaN\n",
    "        \n",
    "    elif XA<0 and AB>0 and BC<0 and CD>0:\n",
    "        if AB_range[0]<abs(AB)<AB_range[1] and BC_range[0]<abs(BC)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1]:\n",
    "            return -1\n",
    "        else:\n",
    "            return np.isnan\n",
    "    else:\n",
    "        return np.isnan      \n",
    "\n",
    "# Detection des Bat\n",
    "def is_bat(moves,err_allowed):  \n",
    "    XA=moves[0]\n",
    "    AB=moves[1]\n",
    "    BC=moves[2]\n",
    "    CD=moves[3]\n",
    "    \n",
    "    AB_range = np.array([0.382 - err_allowed,0.5 + err_allowed])*abs(XA)\n",
    "    BC_range = np.array([0.382 - err_allowed,0.886 + err_allowed])*abs(AB)\n",
    "    CD_range = np.array([1.618 - err_allowed,2.618 + err_allowed])*abs(BC)\n",
    "    \n",
    "    if XA>0 and AB<0 and BC>0 and CD<0:\n",
    "        if AB_range[0]<abs(AB)<AB_range[1] and BC_range[0]<abs(BC)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1]:\n",
    "            return 1\n",
    "        else:\n",
    "            return np.NaN\n",
    "        \n",
    "    elif XA<0 and AB>0 and BC<0 and CD>0:\n",
    "        if AB_range[0]<abs(AB)<AB_range[1] and BC_range[0]<abs(BC)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1]:\n",
    "            return -1\n",
    "        else:\n",
    "            return np.isnan\n",
    "    else:\n",
    "        return np.isnan\n",
    "    \n",
    "# Detection des ABCD\n",
    "def is_abcd(moves,err_allowed):  \n",
    "    AB=moves[1]\n",
    "    BC=moves[2]\n",
    "    CD=moves[3]\n",
    "    \n",
    "    BC_range = np.array([0.618 - err_allowed,0.618 + err_allowed])*abs(AB)\n",
    "    CD_range = np.array([1.618 - err_allowed,1.618 + err_allowed])*abs(BC)\n",
    "    CD2_range = np.array([1 - err_allowed,1 + err_allowed])*abs(AB)\n",
    "    \n",
    "    if AB<0 and BC>0 and CD<0 :    \n",
    "        if BC_range[0]<abs(BC)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1] \\\n",
    "        and CD2_range[0]<abs(CD)<CD2_range[1] :\n",
    "            return 1\n",
    "        else:\n",
    "            return np.NaN\n",
    "        \n",
    "    elif AB>0 and BC<0 and CD>0 :\n",
    "        if BC_range[0]<abs(AB)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1]\\\n",
    "        and CD2_range[0]<abs(CD)<CD2_range[1]:\n",
    "            return -1\n",
    "        else:\n",
    "            return np.isnan\n",
    "    else:\n",
    "        return np.isnan    \n",
    "\n",
    "# Detection des Shark\n",
    "def is_shark(moves,err_allowed):  \n",
    "    \n",
    "    XA=moves[0]\n",
    "    AB=moves[1]\n",
    "    BC=moves[2]\n",
    "    CD=moves[3]\n",
    "  \n",
    "    #CD_range = np.array([0.886 - err_allowed,1.13 + err_allowed])*abs(XB)\n",
    "    BC_range = np.array([1.13 - err_allowed,1.618 + err_allowed])*abs(AB)\n",
    "    CD_range = np.array([1.618 - err_allowed,2.24 + err_allowed])*abs(BC)\n",
    "    CD_range2 = np.array([0.88 - err_allowed,1.13 + err_allowed])*abs(XA)   \n",
    "    \n",
    "    if XA>0 and AB<0 and BC>0 and CD<0 :\n",
    "        if BC_range[0]<abs(BC)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1] and CD_range2[0]<abs(CD)<CD_range2[1]:\n",
    "            return 1\n",
    "        else:\n",
    "            return np.NaN\n",
    "        \n",
    "    elif XA<0 and AB>0 and BC<0 and CD>0 :\n",
    "        if  BC_range[0]<abs(BC)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1] and CD_range2[0]<abs(CD)<CD_range2[1]:\n",
    "            return -1\n",
    "        else:\n",
    "            return np.isnan\n",
    "    else:\n",
    "        return np.isnan\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    print('Global Optimized LumberJack Environment Motor for For_Ex\\nLumberJack Jyss 5781(c)')\n",
    "    print(col.Fore.CYAN,'°0Oo_D.A.G._26_oO0°')\n",
    "    print(col.Fore.YELLOW,col.Back.BLUE,'--- Golem Harmo FXCM m15 #v1.0 ---',col.Style.RESET_ALL)\n",
    "    print('')\n",
    "    con = None\n",
    "    try:\n",
    "        con\n",
    "    except NameError:\n",
    "        con = fxcmpy.fxcmpy(access_token=_token, log_level='error',server=_server)\n",
    "        print(col.Fore.GREEN+'Connexion établie'+col.Style.RESET_ALL)\n",
    "        print('Compte utilisé : ',con.get_account_ids())\n",
    "                \n",
    "    else:\n",
    "        con = conX(con,_token,_server)\n",
    "\n",
    "\n",
    "    try:   \n",
    "        _last_bougie = (con.get_candles('EUR/USD',period='m5',number=1).index.hour[0])\n",
    "        _now = dt.datetime.now().hour\n",
    "\n",
    "        if _now - _last_bougie < 0:\n",
    "            _decay = _now + 24 - _last_bougie\n",
    "\n",
    "        else:\n",
    "            _decay = _now - _last_bougie\n",
    "\n",
    "\n",
    "        print('\\nDecay = ',_decay,'\\n')\n",
    "        joblib.dump(_decay,'VARS/decay.dag')\n",
    "        _no_access = 0\n",
    "    except:\n",
    "        print('\\n',col.Back.RED,col.Fore.BLACK,'/!\\ LES DONNEES NE SONT PAS ACCESSIBLES. PAS DE MAJ NI DE LIVE /!\\ ',col.Style.RESET_ALL)\n",
    "        time.sleep(0.1)\n",
    "        _no_access = 1\n",
    "\n",
    "while True:\n",
    "    while dt.datetime.now().minute not in [0, 15, 30, 45]:\n",
    "        print('\\rAttente de la nouvelle bougie - Mise en veille - Heure locale :',dt.datetime.now(),end='',flush=True)\n",
    "        time.sleep(1)\n",
    "        \n",
    "   \n",
    "    print('Scan, heure locale :',dt.datetime.now())\n",
    "\n",
    "    _last_bougie = (con.get_candles('EUR/USD',period='m5',number=1).index.hour[0])\n",
    "    _now = dt.datetime.now().hour\n",
    "\n",
    "    if _now - _last_bougie < 0:\n",
    "        _decay = _now + 24 - _last_bougie\n",
    "    else:\n",
    "        _decay = _now - _last_bougie\n",
    "\n",
    "    TICKER_LIST = con.get_instruments()\n",
    "    for t in ['US.BANKS','ACA.fr','AI.fr','AIR.fr','ORA.fr','MC.fr','RNO.fr','BAYN.de','BMW.de','DPW.de','DTE.de','AZN.uk','BP.uk','GSK.uk','TSCO.uk','RDSB.uk']:\n",
    "        TICKER_LIST.remove(t)\n",
    "\n",
    "    BAD_TICKERS = []\n",
    "    _compteur = 0\n",
    "    # TICKER_LIST = con.get_instruments()\n",
    "    for x in tqdm(TICKER_LIST):\n",
    "        #try:\n",
    "        _ticker = x.replace('/','')\n",
    "        df = get_candl(con,x,_period,_number)\n",
    "        if _period == 'm5':\n",
    "            if (dt.datetime.now().minute - df.index[-1].minute <= 5) : # or ((dt.datetime.now().minute - df.index[-1].minute == -55)) :\n",
    "                df = df.iloc[:-1,:]\n",
    "                #print('\\rCut en m5 - Dernière bougie _period récupérée :',df.index[-1],end='')\n",
    "            else :\n",
    "                #print('\\rNo Cut en m5 - Dernière bougie _period récupérée :',df.index[-1],end='')\n",
    "                pass\n",
    "\n",
    "        elif _period == 'm15':\n",
    "            if (dt.datetime.now().minute - df.index[-1].minute <= 15) : # or ((dt.datetime.now().minute - df.index[-1].minute == -55)) :\n",
    "                df = df.iloc[:-1,:]\n",
    "                #print('\\rCut en m15 - Dernière bougie _period récupérée :',df.index[-1],end='')\n",
    "            else :\n",
    "                #print('\\rNo Cut en m15 - Dernière bougie _period récupérée :',df.index[-1],end='')\n",
    "                pass\n",
    "\n",
    "        elif _period == 'm30':\n",
    "            if (dt.datetime.now().minute - df.index[-1].minute <= 30) : # or ((dt.datetime.now().minute - df.index[-1].minute == -55)) :\n",
    "                df = df.iloc[:-1,:]\n",
    "                #print('\\rCut en m30 - Dernière bougie _period récupérée :',df.index[-1],end='')\n",
    "            else :\n",
    "                #print('\\rNo Cut en m30 - Dernière bougie _period récupérée :',df.index[-1],end='')\n",
    "                pass\n",
    "        \n",
    "        if _period == 'H1' :\n",
    "            if dt.datetime.now().hour - df.index[-1].hour == _decay :\n",
    "                df = df.iloc[:-1,:]\n",
    "                #print('\\rCut en H1 - Dernière bougie _period récupérée :',df.index[-1],end='')\n",
    "            else :\n",
    "                #print('\\rNo Cut en H4 - Dernière bougie _period récupérée :',df.index[-1],end='')\n",
    "                pass\n",
    "        \n",
    "        if _period == 'H4' :\n",
    "            if dt.datetime.now().hour - df.index[-1].hour <= 4 + _decay :\n",
    "                df = df.iloc[:-1,:]\n",
    "                #print('\\rCut en H4 - Dernière bougie _period récupérée :',df.index[-1],end='')\n",
    "        \n",
    "            else :\n",
    "                #print('\\rNo Cut en H4 - Dernière bougie _period récupérée :',df.index[-1],end='')\n",
    "                pass\n",
    "\n",
    "        df = drop_we(df)\n",
    "        df = make_mid(df) \n",
    "\n",
    "        price = df['Close']\n",
    "        high = df['High']\n",
    "        low = df['Low']\n",
    "        rsi = talib.RSI(price, timeperiod=14)\n",
    "\n",
    "        for i in range(len(price)-_lookback,len(price)):\n",
    "\n",
    "            # current_idx,current_pat,start,end = peak_detect(price.values[:i+1],low.values[:i+1],high.values[:i+1])\n",
    "            current_idx,current_pat,start,end = peak_detect(high.values[:i+1],low.values[:i+1])\n",
    "\n",
    "            XA = current_pat[1] - current_pat[0]\n",
    "            AB = current_pat[2] - current_pat[1]\n",
    "            BC = current_pat[3] - current_pat[2]\n",
    "            CD = current_pat[4] - current_pat[3]\n",
    "\n",
    "            moves=[XA,AB,BC,CD]\n",
    "\n",
    "            gartley = is_gartley(moves,err_allowed)\n",
    "            butterfly = is_butterfly(moves,err_allowed)\n",
    "            crab = is_crab(moves,err_allowed)\n",
    "            bat = is_bat(moves,err_allowed)\n",
    "            shark = is_shark(moves,err_allowed)\n",
    "            abcd = is_abcd(moves,err_allowed)\n",
    "\n",
    "            current_rsi = [rsi.iloc[current_idx[0]],rsi.iloc[current_idx[1]],rsi.iloc[current_idx[2]],rsi.iloc[current_idx[3]],rsi.iloc[current_idx[4]]]\n",
    "            current_rsi_max = max(current_rsi)\n",
    "            current_rsi_min = min(current_rsi)\n",
    "            delta_price = current_pat[4] - current_pat[2]\n",
    "            delta_rsi = current_rsi[4] - current_rsi[2]\n",
    "\n",
    "            harmonics = np.array([gartley,butterfly,bat,crab,shark,abcd])\n",
    "            #harmonics = np.array([abcd])\n",
    "            labels = ['gartley','butterly','bat','crab','shark','abcd']\n",
    "            #labels = ['abcd']\n",
    "            #if (np.any(harmonics==1) and delta_price<0 and delta_rsi>0) or (np.any(harmonics==-1) and delta_price>0 and delta_rsi<0):\n",
    "            if np.any(harmonics==1) or np.any(harmonics==-1):\n",
    "                _compteur += 1\n",
    "                for j in range(0, len(harmonics)):\n",
    "                    _pic = str(i)+'.png'\n",
    "                    _directory = str(df.index[current_idx[-1]]).replace('-','_').replace(' ','_').replace(':','_')+'/'+_period+'/'\n",
    "            \n",
    "                    if not os.path.exists('RESULTS/'+_directory):\n",
    "                        os.makedirs('RESULTS/'+_directory)\n",
    "\n",
    "                    if harmonics[j]==1 or harmonics[j]==-1:\n",
    "                        sense ='bearish' if harmonics[j]==-1 else 'bullish'\n",
    "                        label =  sense + ' '+labels[j] +' found in TimeFrame '+_period\n",
    "                        \n",
    "                        _signals = [(df.index[current_idx[0]],current_pat[0]),(df.index[current_idx[1]],current_pat[1]),(df.index[current_idx[2]],current_pat[2])\\\n",
    "                                    ,(df.index[current_idx[3]],current_pat[3]),(df.index[current_idx[4]],current_pat[4])]\n",
    "                        df['Scatter'] = np.where(df.index==df.index[current_idx[-1]],current_pat[-1],np.nan)\n",
    "                        if sense == 'bullish':\n",
    "                            _line_price = fplt.make_addplot(df.iloc[start:,:].Scatter.to_list(),type='scatter',markersize=150,marker='^',color='green')\n",
    "                        if sense == 'bearish':\n",
    "                            _line_price = fplt.make_addplot(df.iloc[start:,:].Scatter.to_list(),type='scatter',markersize=150,marker='v',color='r')\n",
    "                        fplt.plot(df.iloc[start:-1,:], type='candle',title=_ticker+' - '+label,ylabel='Price',figscale=1.1,  datetime_format='%d-%m-%Y',alines=_signals,addplot=_line_price,\\\n",
    "                            savefig='RESULTS/TEMP/'+_pic)\n",
    "                        \n",
    "                        telegram_message('Ticker : '+x+'\\nTimeFrame : '+_period+\"\\nSignal's Sense : \"+sense+\"\\nSignal's Date : \"+str(df.index[current_idx[-1]])+\"\\nClose's Price : \"+\\\n",
    "                                str(round(price[i],4))+\"\\nScatter's Price : \"+str(round(current_pat[-1],4)))\n",
    "                        \n",
    "                        telegram_pic('RESULTS/'+_directory+_pic)\n",
    "                        time.sleep(0.1)\n",
    "                        print(df.index[current_idx],df.index[i])\n",
    "        #except:\n",
    "         #   BAD_TICKERS.append(_ticker)\n",
    "                \n",
    "    print('\\nIl y a eu ',_compteur,'signaux de trouvé dans la TimeFrame',_period)\n",
    "    telegram_message('\\nIl y a eu '+str(_compteur)+' signaux de trouvé dans la TimeFrame '+_period)\n",
    "\n",
    "    while dt.datetime.now().minute in [0, 15, 30, 45]:\n",
    "        print('\\rAttente de la nouvelle bougie - Mise en veille - Heure locale :',dt.datetime.now(),end='',flush=True)\n",
    "        time.sleep(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "output_type": "error",
     "ename": "NameError",
     "evalue": "name '_line_price' is not defined",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-c76c541015f2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0m_line_price\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name '_line_price' is not defined"
     ]
    }
   ],
   "source": [
    "_line_price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Envoi message texte\n",
    "def telegram_message(_message):\n",
    "    message = 'https://api.telegram.org/bot'+ _bot_token +  '/sendMessage?chat_id=' + _chat_id+ '&parse_mode=Markdown&text=' + _message\n",
    "    send = requests.post(message)\n",
    "\n",
    "# Envoi image\n",
    "def telegram_pic(_pic):\n",
    "    files = {'photo': open(_pic, 'rb')}\n",
    "    message = ('https://api.telegram.org/bot'+ _bot_token + '/sendPhoto?chat_id=' + _chat_id)\n",
    "    send = requests.post(message, files = files)\n",
    "\n",
    "# Réduit la dataframe à OHLC\n",
    "def reduce_df(df):\n",
    "    df = df[['Close','CloseAsk','CloseBid','High','HighAsk','HighBid','Low','LowAsk','LowBid','Open','OpenAsk','OpenBid','Symbol','Date']]\n",
    "    return(df)\n",
    "\n",
    "# Vérifie la présence de we\n",
    "def is_we(dataframe_to_check):\n",
    "    IDX = dataframe_to_check.index.to_list()\n",
    "    c=0\n",
    "    for day in IDX:\n",
    "        if day.weekday() == 5 or day.weekday() == 6:\n",
    "            c += 1\n",
    "    print('Nombre de samedi et dimanches présents :',c)\n",
    "\n",
    "# Drop les lignes appartenant à un we\n",
    "def drop_we(df):\n",
    "    df['WE'] = np.where(((df.index.weekday == 5) | (df.index.weekday == 6)),None,df.index.weekday)\n",
    "    df = df.dropna()\n",
    "    df = df.drop(['WE'],axis=1)\n",
    "    return(df)\n",
    "\n",
    "# Met à jour la base\n",
    "def maj(df, con,_tf,_decay=0):\n",
    "    \n",
    "    _fin = dt.datetime.now()\n",
    "    _deb = df.index[-1]\n",
    "    _debut = dt.datetime(_deb.year,_deb.month,_deb.day,_deb.hour,_deb.minute)\n",
    "    # Scrap the addon & build it to be compliant with our df\n",
    "    addon = get_candl(con,_debut, _fin,_tf)\n",
    "    # Calculate the mid prices\n",
    "\n",
    "    addon = make_mid(addon)\n",
    "    addon = drop_we(addon)\n",
    "    addon = make_mid(addon)\n",
    "    addon['Symbol'] = _ticker\n",
    "    addon['Date'] = addon.index\n",
    "    addon['Date'] = pd.to_datetime(addon['Date'].dt.strftime(date_format='%Y-%m-%d'))\n",
    "\n",
    "    # Concatenate the bases\n",
    "    df = df.append(addon.iloc[1:,:])\n",
    "    #df = df.iloc[-263570:,:]\n",
    "    if _tf == 'm5':\n",
    "        if (dt.datetime.now().minute - df.index[-1].minute <= 5) : # or ((dt.datetime.now().minute - df.index[-1].minute == -55)) :\n",
    "            df = df.iloc[:-1,:]\n",
    "            print('Cut en m5 - Dernière bougie _period récupérée :',df.index[-1])\n",
    "        else :\n",
    "            print('No Cut en m5 - Dernière bougie _period récupérée :',df.index[-1])\n",
    "\n",
    "    elif _tf == 'm15':\n",
    "        if (dt.datetime.now().minute - df.index[-1].minute <= 15) : # or ((dt.datetime.now().minute - df.index[-1].minute == -55)) :\n",
    "            df = df.iloc[:-1,:]\n",
    "            print('Cut en m15 - Dernière bougie _period récupérée :',df.index[-1])\n",
    "        else :\n",
    "            print('No Cut en m15 - Dernière bougie _period récupérée :',df.index[-1])\n",
    "\n",
    "    elif _tf == 'm30':\n",
    "        if (dt.datetime.now().minute - df.index[-1].minute <= 30) : # or ((dt.datetime.now().minute - df.index[-1].minute == -55)) :\n",
    "            df = df.iloc[:-1,:]\n",
    "            print('Cut en m30 - Dernière bougie _period récupérée :',df.index[-1])\n",
    "        else :\n",
    "            print('No Cut en m30 - Dernière bougie _period récupérée :',df.index[-1])\n",
    "    \n",
    "    if _tf == 'H1' :\n",
    "        if dt.datetime.now().hour - df.index[-1].hour == _decay :\n",
    "            df = df.iloc[:-1,:]\n",
    "            print('Cut en H1 - Dernière bougie _period récupérée :',df.index[-1])\n",
    "    \n",
    "    if _tf == 'H4' :\n",
    "        if dt.datetime.now().hour - df.index[-1].hour == 4 + _decay :\n",
    "            df = df.iloc[:-1,:]\n",
    "            print('Cut en H4 - Dernière bougie _period récupérée :',df.index[-1])\n",
    "    \n",
    "        else :\n",
    "            print('No Cut en H4 - Dernière bougie _period récupérée :',df.index[-1])\n",
    "    return(df)\n",
    "\n",
    "# Calcul les valeurs mid à partir des Bid/Ask\n",
    "def make_mid(df):\n",
    "    df['Open'] = (df.OpenAsk + df.OpenBid)/2\n",
    "    df['High'] = (df.HighAsk + df.HighBid)/2\n",
    "    df['Low'] = (df.LowAsk + df.LowBid)/2\n",
    "    df['Close'] = (df.CloseAsk + df.CloseBid)/2\n",
    "    df['Symbol'] = _ticker\n",
    "    df['Date'] = df.index\n",
    "    df['Date'] = pd.to_datetime(df['Date'].dt.strftime(date_format='%Y-%m-%d'))\n",
    "    df = drop_we(df)\n",
    "    return(df)\n",
    "\n",
    "# Récupère les boudies fxcm\n",
    "def get_candl(con,x,_tf,_number=200):\n",
    "    df = con.get_candles(x,period=_tf,number=_number).drop(['tickqty'],axis=1)\n",
    "    df = df.rename(columns={'bidopen':'OpenBid','bidclose':'CloseBid','bidhigh':'HighBid','bidlow':'LowBid','askopen':'OpenAsk','askclose':'CloseAsk','askhigh':'HighAsk','asklow':'LowAsk'})\n",
    "    return(df)\n",
    "\n",
    "# Connexion à fxcm\n",
    "def conX(con,_token,_server):\n",
    "    #global con\n",
    "    try:\n",
    "        con.is_connected()\n",
    "        if con.is_connected() == True:\n",
    "            print('Déjà connecté')\n",
    "            print('')\n",
    "        else:\n",
    "            con = fxcmpy.fxcmpy(access_token=_token, log_level='error',server=_server)\n",
    "            print(col.Fore.GREEN+'Connexion établie'+col.Style.RESET_ALL)\n",
    "            print('Compte utilisé : ',con.get_account_ids())\n",
    "            print('')\n",
    "    except:\n",
    "        con = fxcmpy.fxcmpy(access_token=_token, log_level='error',server=_server)\n",
    "        if con.is_connected() == True:\n",
    "            print(col.Fore.GREEN+'Connexion établie'+col.Style.RESET_ALL)\n",
    "            print('Compte utilisé : ',con.get_account_ids())\n",
    "            print('')\n",
    "        else:\n",
    "            print(col.Fore.RED+'Connexion non établie'+col.Style.RESET_ALL)\n",
    "            print('')\n",
    "    return(con)\n",
    "\n",
    "# Detection des peaks / valleys\n",
    "def peak_detect(high,low,order=10):\n",
    "    #print('price.shape',price.shape)\n",
    "    max_idx = list(argrelextrema(high,np.greater,order=order)[0])\n",
    "    #print('max_idx shape',len(max_idx))\n",
    "    min_idx = list(argrelextrema(low,np.less,order=order)[0])\n",
    "    #print('min_idx shape',len(min_idx))\n",
    "    idx = max_idx + min_idx\n",
    "    #print('idx shape',len(idx))\n",
    "    idx.sort()\n",
    "    CURRENT = []\n",
    "    for i in idx:\n",
    "        if i in max_idx:\n",
    "            CURRENT.append(high[i])\n",
    "        else:\n",
    "            CURRENT.append(low[i])\n",
    "\n",
    "\n",
    "    if idx[-1] in max_idx:\n",
    "        CURRENT.append(low[len(high)-1])\n",
    "\n",
    "    else:\n",
    "        CURRENT.append(high[len(low)-1])\n",
    "    \n",
    "    CURRENT = CURRENT[-5:]\n",
    "    _current_idx = idx[-4:] + [len(high)-1]\n",
    "    #print('current_idx shape',len(current_idx))\n",
    "    _start = min(_current_idx)\n",
    "    _end = max(_current_idx)\n",
    "    return _current_idx,CURRENT,_start,_end \n",
    "\n",
    "# Detection des Gartley\n",
    "def is_gartley(moves,err_allowed):  \n",
    "    XA=moves[0]\n",
    "    AB=moves[1]\n",
    "    BC=moves[2]\n",
    "    CD=moves[3]\n",
    "   \n",
    "    AB_range = np.array([0.618 - err_allowed,0.618 + err_allowed])*abs(XA)\n",
    "    BC_range = np.array([0.382 - err_allowed,0.886 + err_allowed])*abs(AB)\n",
    "    CD_range = np.array([1.27 - err_allowed,1.618 + err_allowed])*abs(BC)\n",
    "        \n",
    "    if XA>0 and AB<0 and BC>0 and CD<0:\n",
    "        if AB_range[0]<abs(AB)<AB_range[1] and BC_range[0]<abs(BC)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1]:\n",
    "            return 1\n",
    "        else:\n",
    "            return np.isnan\n",
    "        \n",
    "    elif XA<0 and AB>0 and BC<0 and CD>0:\n",
    "        if AB_range[0]<abs(AB)<AB_range[1] and BC_range[0]<abs(BC)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1]:\n",
    "            return -1\n",
    "        else:\n",
    "            return np.isnan\n",
    "    else:\n",
    "        return np.isnan\n",
    "\n",
    "# Detection des Butterfly\n",
    "def is_butterfly(moves,err_allowed):   \n",
    "    XA=moves[0]\n",
    "    AB=moves[1]\n",
    "    BC=moves[2]\n",
    "    CD=moves[3]\n",
    "    \n",
    "    AB_range = np.array([0.786 - err_allowed,0.786 + err_allowed])*abs(XA)\n",
    "    BC_range = np.array([0.382 - err_allowed,0.886 + err_allowed])*abs(AB)\n",
    "    CD_range = np.array([1.618 - err_allowed,2.618 + err_allowed])*abs(BC)\n",
    "        \n",
    "    if XA>0 and AB<0 and BC>0 and CD<0:\n",
    "        if AB_range[0]<abs(AB)<AB_range[1] and BC_range[0]<abs(BC)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1]:\n",
    "            return 1\n",
    "        else:\n",
    "            return np.NaN\n",
    "        \n",
    "    elif XA<0 and AB>0 and BC<0 and CD>0:      \n",
    "        if AB_range[0]<abs(AB)<AB_range[1] and BC_range[0]<abs(BC)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1]:\n",
    "            return -1\n",
    "        else:\n",
    "            return np.isnan\n",
    "    else:\n",
    "        return np.isnan       \n",
    "\n",
    "# Detection des Crab\n",
    "def is_crab(moves,err_allowed):      \n",
    "    XA=moves[0]\n",
    "    AB=moves[1]\n",
    "    BC=moves[2]\n",
    "    CD=moves[3]\n",
    "    \n",
    "    AB_range = np.array([0.382 - err_allowed,0.618 + err_allowed])*abs(XA)\n",
    "    BC_range = np.array([0.382 - err_allowed,0.886 + err_allowed])*abs(AB)\n",
    "    CD_range = np.array([2.24 - err_allowed,3.618 + err_allowed])*abs(BC)\n",
    "           \n",
    "    if XA>0 and AB<0 and BC>0 and CD<0:\n",
    "        if AB_range[0]<abs(AB)<AB_range[1] and BC_range[0]<abs(BC)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1]:\n",
    "            return 1\n",
    "        else:\n",
    "            return np.NaN\n",
    "        \n",
    "    elif XA<0 and AB>0 and BC<0 and CD>0:\n",
    "        if AB_range[0]<abs(AB)<AB_range[1] and BC_range[0]<abs(BC)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1]:\n",
    "            return -1\n",
    "        else:\n",
    "            return np.isnan\n",
    "    else:\n",
    "        return np.isnan      \n",
    "\n",
    "# Detection des Bat\n",
    "def is_bat(moves,err_allowed):  \n",
    "    XA=moves[0]\n",
    "    AB=moves[1]\n",
    "    BC=moves[2]\n",
    "    CD=moves[3]\n",
    "    \n",
    "    AB_range = np.array([0.382 - err_allowed,0.5 + err_allowed])*abs(XA)\n",
    "    BC_range = np.array([0.382 - err_allowed,0.886 + err_allowed])*abs(AB)\n",
    "    CD_range = np.array([1.618 - err_allowed,2.618 + err_allowed])*abs(BC)\n",
    "    \n",
    "    if XA>0 and AB<0 and BC>0 and CD<0:\n",
    "        if AB_range[0]<abs(AB)<AB_range[1] and BC_range[0]<abs(BC)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1]:\n",
    "            return 1\n",
    "        else:\n",
    "            return np.NaN\n",
    "        \n",
    "    elif XA<0 and AB>0 and BC<0 and CD>0:\n",
    "        if AB_range[0]<abs(AB)<AB_range[1] and BC_range[0]<abs(BC)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1]:\n",
    "            return -1\n",
    "        else:\n",
    "            return np.isnan\n",
    "    else:\n",
    "        return np.isnan\n",
    "    \n",
    "# Detection des ABCD\n",
    "def is_abcd(moves,err_allowed):  \n",
    "    AB=moves[1]\n",
    "    BC=moves[2]\n",
    "    CD=moves[3]\n",
    "    \n",
    "    BC_range = np.array([0.618 - err_allowed,0.618 + err_allowed])*abs(AB)\n",
    "    CD_range = np.array([1.618 - err_allowed,1.618 + err_allowed])*abs(BC)\n",
    "    CD2_range = np.array([1 - err_allowed,1 + err_allowed])*abs(AB)\n",
    "    \n",
    "    if AB<0 and BC>0 and CD<0 :    \n",
    "        if BC_range[0]<abs(BC)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1] \\\n",
    "        and CD2_range[0]<abs(CD)<CD2_range[1] :\n",
    "            return 1\n",
    "        else:\n",
    "            return np.NaN\n",
    "        \n",
    "    elif AB>0 and BC<0 and CD>0 :\n",
    "        if BC_range[0]<abs(AB)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1]\\\n",
    "        and CD2_range[0]<abs(CD)<CD2_range[1]:\n",
    "            return -1\n",
    "        else:\n",
    "            return np.isnan\n",
    "    else:\n",
    "        return np.isnan    \n",
    "\n",
    "# Detection des Shark\n",
    "def is_shark(moves,err_allowed):  \n",
    "    \n",
    "    XA=moves[0]\n",
    "    AB=moves[1]\n",
    "    BC=moves[2]\n",
    "    CD=moves[3]\n",
    "  \n",
    "    #CD_range = np.array([0.886 - err_allowed,1.13 + err_allowed])*abs(XB)\n",
    "    BC_range = np.array([1.13 - err_allowed,1.618 + err_allowed])*abs(AB)\n",
    "    CD_range = np.array([1.618 - err_allowed,2.24 + err_allowed])*abs(BC)\n",
    "    CD_range2 = np.array([0.88 - err_allowed,1.13 + err_allowed])*abs(XA)   \n",
    "    \n",
    "    if XA>0 and AB<0 and BC>0 and CD<0 :\n",
    "        if BC_range[0]<abs(BC)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1] and CD_range2[0]<abs(CD)<CD_range2[1]:\n",
    "            return 1\n",
    "        else:\n",
    "            return np.NaN\n",
    "        \n",
    "    elif XA<0 and AB>0 and BC<0 and CD>0 :\n",
    "        if  BC_range[0]<abs(BC)<BC_range[1] and CD_range[0]<abs(CD)<CD_range[1] and CD_range2[0]<abs(CD)<CD_range2[1]:\n",
    "            return -1\n",
    "        else:\n",
    "            return np.isnan\n",
    "    else:\n",
    "        return np.isnan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "Déjà connecté\n",
      "\n",
      "\u001b[32mConnexion établie\u001b[0m\n",
      "Compte utilisé :  [1294950]\n",
      "\n",
      "Scan, heure locale : 2021-06-07 20:41:28.065804\n",
      " 37%|███▋      | 75/205 [00:31<01:30,  1.44it/s]DatetimeIndex(['2021-06-07 00:00:00', '2021-06-07 03:00:00',\n",
      "               '2021-06-07 09:00:00', '2021-06-07 12:30:00',\n",
      "               '2021-06-07 18:15:00'],\n",
      "              dtype='datetime64[ns]', name='date', freq=None) 2021-06-07 18:15:00\n",
      " 38%|███▊      | 78/205 [00:33<01:41,  1.25it/s]DatetimeIndex(['2021-06-07 00:00:00', '2021-06-07 03:00:00',\n",
      "               '2021-06-07 07:15:00', '2021-06-07 12:30:00',\n",
      "               '2021-06-07 18:15:00'],\n",
      "              dtype='datetime64[ns]', name='date', freq=None) 2021-06-07 18:15:00\n",
      " 61%|██████    | 125/205 [00:52<00:49,  1.63it/s]DatetimeIndex(['2021-06-04 14:00:00', '2021-06-07 07:00:00',\n",
      "               '2021-06-07 11:00:00', '2021-06-07 12:30:00',\n",
      "               '2021-06-07 15:15:00'],\n",
      "              dtype='datetime64[ns]', name='date', freq=None) 2021-06-07 15:15:00\n",
      "100%|██████████| 205/205 [01:22<00:00,  2.50it/s]\n"
     ]
    }
   ],
   "source": [
    "## Librairies\n",
    "import datetime as dt\n",
    "import time\n",
    "import joblib\n",
    "import sys\n",
    "import fxcmpy\n",
    "import colorama as col\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from tqdm import tqdm\n",
    "import talib\n",
    "from scipy.signal import argrelextrema\n",
    "import mplfinance as fplt\n",
    "import requests\n",
    "import json\n",
    "import os\n",
    "sys.path.append('../')\n",
    "\n",
    "\n",
    "err_allowed = 10/100\n",
    "_period = 'm15'\n",
    "_token = joblib.load('TOKENS/_api_token.dag')\n",
    "_bot_token = joblib.load('TOKENS/telegram_token.dag')\n",
    "_chat_id = joblib.load('TOKENS/telegram_chat_id_dev.dag')\n",
    "_server = 'demo'\n",
    "_number = 500\n",
    "_lookback = 1\n",
    "_con = None\n",
    "\n",
    "try:\n",
    "    con.is_connected()\n",
    "    if con.is_connected() == True:\n",
    "        print('Déjà connecté')\n",
    "        print('')\n",
    "    else:\n",
    "        con = fxcmpy.fxcmpy(access_token=_token, log_level='error',server=_server)\n",
    "        print(col.Fore.GREEN+'Connexion établie'+col.Style.RESET_ALL)\n",
    "        print('Compte utilisé : ',con.get_account_ids())\n",
    "        print('')\n",
    "except:\n",
    "    con = fxcmpy.fxcmpy(access_token=_token, log_level='error',server=_server)\n",
    "if con.is_connected() == True:\n",
    "    print(col.Fore.GREEN+'Connexion établie'+col.Style.RESET_ALL)\n",
    "    print('Compte utilisé : ',con.get_account_ids())\n",
    "    print('')\n",
    "else:\n",
    "    print(col.Fore.RED+'Connexion non établie'+col.Style.RESET_ALL)\n",
    "    print('')\n",
    " \n",
    "print('Scan, heure locale :',dt.datetime.now())\n",
    "\n",
    "_last_bougie = (con.get_candles('EUR/USD',period='m5',number=1).index.hour[0])\n",
    "_now = dt.datetime.now().hour\n",
    "\n",
    "if _now - _last_bougie < 0:\n",
    "    _decay = _now + 24 - _last_bougie\n",
    "else:\n",
    "    _decay = _now - _last_bougie\n",
    "\n",
    "TICKER_LIST = con.get_instruments()\n",
    "for t in ['US.BANKS','ACA.fr','AI.fr','AIR.fr','ORA.fr','MC.fr','RNO.fr','BAYN.de','BMW.de','DPW.de','DTE.de','AZN.uk','BP.uk','GSK.uk','TSCO.uk','RDSB.uk']:\n",
    "    TICKER_LIST.remove(t)\n",
    "\n",
    "BAD_TICKERS = []\n",
    "_compteur = 0\n",
    "# TICKER_LIST = con.get_instruments()\n",
    "for x in tqdm(TICKER_LIST):\n",
    "    #try:\n",
    "    _ticker = x.replace('/','')\n",
    "    df = get_candl(con,x,_period,_number)\n",
    "    if _period == 'm5':\n",
    "        if (dt.datetime.now().minute - df.index[-1].minute <= 5) : # or ((dt.datetime.now().minute - df.index[-1].minute == -55)) :\n",
    "            df = df.iloc[:-1,:]\n",
    "            #print('\\rCut en m5 - Dernière bougie _period récupérée :',df.index[-1],end='')\n",
    "        else :\n",
    "            #print('\\rNo Cut en m5 - Dernière bougie _period récupérée :',df.index[-1],end='')\n",
    "            pass\n",
    "\n",
    "    elif _period == 'm15':\n",
    "        if (dt.datetime.now().minute - df.index[-1].minute <= 15) : # or ((dt.datetime.now().minute - df.index[-1].minute == -55)) :\n",
    "            df = df.iloc[:-1,:]\n",
    "            #print('\\rCut en m15 - Dernière bougie _period récupérée :',df.index[-1],end='')\n",
    "        else :\n",
    "            #print('\\rNo Cut en m15 - Dernière bougie _period récupérée :',df.index[-1],end='')\n",
    "            pass\n",
    "\n",
    "    elif _period == 'm30':\n",
    "        if (dt.datetime.now().minute - df.index[-1].minute <= 30) : # or ((dt.datetime.now().minute - df.index[-1].minute == -55)) :\n",
    "            df = df.iloc[:-1,:]\n",
    "            #print('\\rCut en m30 - Dernière bougie _period récupérée :',df.index[-1],end='')\n",
    "        else :\n",
    "            #print('\\rNo Cut en m30 - Dernière bougie _period récupérée :',df.index[-1],end='')\n",
    "            pass\n",
    "    \n",
    "    if _period == 'H1' :\n",
    "        if dt.datetime.now().hour - df.index[-1].hour == _decay :\n",
    "            df = df.iloc[:-1,:]\n",
    "            #print('\\rCut en H1 - Dernière bougie _period récupérée :',df.index[-1],end='')\n",
    "        else :\n",
    "            #print('\\rNo Cut en H4 - Dernière bougie _period récupérée :',df.index[-1],end='')\n",
    "            pass\n",
    "    \n",
    "    if _period == 'H4' :\n",
    "        if dt.datetime.now().hour - df.index[-1].hour <= 4 + _decay :\n",
    "            df = df.iloc[:-1,:]\n",
    "            #print('\\rCut en H4 - Dernière bougie _period récupérée :',df.index[-1],end='')\n",
    "    \n",
    "        else :\n",
    "            #print('\\rNo Cut en H4 - Dernière bougie _period récupérée :',df.index[-1],end='')\n",
    "            pass\n",
    "\n",
    "\n",
    "    df = drop_we(df)\n",
    "    df = make_mid(df) \n",
    "\n",
    "    price = df['Close']\n",
    "    high = df['High']\n",
    "    low = df['Low']\n",
    "    rsi = talib.RSI(price, timeperiod=14)\n",
    "\n",
    "    for i in range(len(price)-_lookback,len(price)):\n",
    "\n",
    "        # current_idx,current_pat,start,end = peak_detect(price.values[:i+1],low.values[:i+1],high.values[:i+1])\n",
    "        current_idx,current_pat,start,end = peak_detect(high.values[:i+1],low.values[:i+1])\n",
    "\n",
    "        XA = current_pat[1] - current_pat[0]\n",
    "        AB = current_pat[2] - current_pat[1]\n",
    "        BC = current_pat[3] - current_pat[2]\n",
    "        CD = current_pat[4] - current_pat[3]\n",
    "\n",
    "        moves=[XA,AB,BC,CD]\n",
    "\n",
    "        gartley = is_gartley(moves,err_allowed)\n",
    "        butterfly = is_butterfly(moves,err_allowed)\n",
    "        crab = is_crab(moves,err_allowed)\n",
    "        bat = is_bat(moves,err_allowed)\n",
    "        shark = is_shark(moves,err_allowed)\n",
    "        abcd = is_abcd(moves,err_allowed)\n",
    "\n",
    "        current_rsi = [rsi.iloc[current_idx[0]],rsi.iloc[current_idx[1]],rsi.iloc[current_idx[2]],rsi.iloc[current_idx[3]],rsi.iloc[current_idx[4]]]\n",
    "        current_rsi_max = max(current_rsi)\n",
    "        current_rsi_min = min(current_rsi)\n",
    "        delta_price = current_pat[4] - current_pat[2]\n",
    "        delta_rsi = current_rsi[4] - current_rsi[2]\n",
    "\n",
    "        harmonics = np.array([gartley,butterfly,bat,crab,shark,abcd])\n",
    "        #harmonics = np.array([abcd])\n",
    "        labels = ['gartley','butterly','bat','crab','shark','abcd']\n",
    "        #labels = ['abcd']\n",
    "        #if (np.any(harmonics==1) and delta_price<0 and delta_rsi>0) or (np.any(harmonics==-1) and delta_price>0 and delta_rsi<0):\n",
    "        if np.any(harmonics==1) or np.any(harmonics==-1):\n",
    "            _compteur += 1\n",
    "            for j in range(0, len(harmonics)):\n",
    "                _pic = str(i)+'.png'\n",
    "                _directory = str(df.index[current_idx[-1]]).replace('-','_').replace(' ','_').replace(':','_')+'/'+_period+'/'\n",
    "        \n",
    "                if not os.path.exists('RESULTS/'+_directory):\n",
    "                    os.makedirs('RESULTS/'+_directory)\n",
    "\n",
    "                if harmonics[j]==1 or harmonics[j]==-1:\n",
    "                    sense ='bearish' if harmonics[j]==-1 else 'bullish'\n",
    "                    label =  sense + ' '+labels[j] +' found in TimeFrame '+_period\n",
    "                    \n",
    "                    _signals = [(df.index[current_idx[0]],current_pat[0]),(df.index[current_idx[1]],current_pat[1]),(df.index[current_idx[2]],current_pat[2])\\\n",
    "                                ,(df.index[current_idx[3]],current_pat[3]),(df.index[current_idx[4]],current_pat[4])]\n",
    "                    df['Scatter'] = np.where(df.index==df.index[current_idx[-1]],current_pat[-1],np.nan)\n",
    "                    if sense == 'bullish':\n",
    "                        _line_price = fplt.make_addplot(df.iloc[start:,:].Scatter.to_list(),type='scatter',markersize=150,marker='^',color='green')\n",
    "                    if sense == 'bearish':\n",
    "                        _line_price = fplt.make_addplot(df.iloc[start:,:].Scatter.to_list(),type='scatter',markersize=150,marker='v',color='r')\n",
    "                    fplt.plot(df.iloc[start:,:], type='candle',title=_ticker+' - '+label,ylabel='Price',figscale=1.1,  datetime_format='%d-%m-%Y',alines=_signals,addplot=_line_price,\\\n",
    "                        savefig='RESULTS/'+_directory+_pic)\n",
    "                    \n",
    "                    telegram_message('Ticker : '+x+'\\nTimeFrame : '+_period+\"\\nSignal's Sense : \"+sense+\"\\nSignal's Date : \"+str(df.index[current_idx[-1]])+\"\\nClose's Price : \"+\\\n",
    "                            str(round(price[i],4))+\"\\nScatter's Price : \"+str(round(current_pat[-1],4)))\n",
    "                    \n",
    "                    telegram_pic('RESULTS/'+_directory+_pic)\n",
    "                    time.sleep(0.1)\n",
    "                    print(df.index[current_idx],df.index[i])\n",
    "    #except:\n",
    "        #   BAD_TICKERS.append(_ticker)\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "                     OpenBid  CloseBid  HighBid   LowBid  OpenAsk  CloseAsk  \\\n",
       "date                                                                          \n",
       "2021-05-27 01:15:00  1504.57   1503.05  1504.76  1501.18  1505.93   1504.04   \n",
       "2021-05-27 01:30:00  1503.05   1503.71  1503.96  1500.93  1504.04   1504.68   \n",
       "2021-05-27 01:45:00  1503.71   1502.88  1505.05  1500.05  1504.68   1503.89   \n",
       "2021-05-27 02:00:00  1502.88   1503.14  1504.28  1501.05  1503.89   1504.12   \n",
       "2021-05-27 02:15:00  1503.14   1502.18  1503.70  1501.30  1504.12   1503.18   \n",
       "...                      ...       ...      ...      ...      ...       ...   \n",
       "2021-06-07 17:00:00  1573.51   1571.12  1574.48  1569.80  1574.49   1572.11   \n",
       "2021-06-07 17:15:00  1571.13   1567.96  1572.26  1564.19  1572.11   1568.95   \n",
       "2021-06-07 17:30:00  1567.47   1570.51  1571.16  1565.30  1568.94   1571.52   \n",
       "2021-06-07 17:45:00  1570.54   1570.24  1572.51  1568.94  1571.52   1571.25   \n",
       "2021-06-07 18:00:00  1570.23   1560.34  1572.43  1556.55  1571.21   1561.63   \n",
       "\n",
       "                     HighAsk   LowAsk      Open      High       Low     Close  \\\n",
       "date                                                                            \n",
       "2021-05-27 01:15:00  1507.20  1503.59  1505.250  1505.980  1502.385  1503.545   \n",
       "2021-05-27 01:30:00  1506.20  1503.53  1503.545  1505.080  1502.230  1504.195   \n",
       "2021-05-27 01:45:00  1506.83  1502.43  1504.195  1505.940  1501.240  1503.385   \n",
       "2021-05-27 02:00:00  1506.58  1503.20  1503.385  1505.430  1502.125  1503.630   \n",
       "2021-05-27 02:15:00  1505.83  1503.16  1503.630  1504.765  1502.230  1502.680   \n",
       "...                      ...      ...       ...       ...       ...       ...   \n",
       "2021-06-07 17:00:00  1576.70  1571.05  1574.000  1575.590  1570.425  1571.615   \n",
       "2021-06-07 17:15:00  1574.34  1566.05  1571.620  1573.300  1565.120  1568.455   \n",
       "2021-06-07 17:30:00  1573.20  1567.49  1568.205  1572.180  1566.395  1571.015   \n",
       "2021-06-07 17:45:00  1574.96  1570.76  1571.030  1573.735  1569.850  1570.745   \n",
       "2021-06-07 18:00:00  1574.83  1558.86  1570.720  1573.630  1557.705  1560.985   \n",
       "\n",
       "                    Symbol       Date   Scatter  \n",
       "date                                             \n",
       "2021-05-27 01:15:00   SOYF 2021-05-27       NaN  \n",
       "2021-05-27 01:30:00   SOYF 2021-05-27       NaN  \n",
       "2021-05-27 01:45:00   SOYF 2021-05-27       NaN  \n",
       "2021-05-27 02:00:00   SOYF 2021-05-27       NaN  \n",
       "2021-05-27 02:15:00   SOYF 2021-05-27       NaN  \n",
       "...                    ...        ...       ...  \n",
       "2021-06-07 17:00:00   SOYF 2021-06-07       NaN  \n",
       "2021-06-07 17:15:00   SOYF 2021-06-07       NaN  \n",
       "2021-06-07 17:30:00   SOYF 2021-06-07       NaN  \n",
       "2021-06-07 17:45:00   SOYF 2021-06-07       NaN  \n",
       "2021-06-07 18:00:00   SOYF 2021-06-07  1557.705  \n",
       "\n",
       "[499 rows x 15 columns]"
      ],
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>OpenBid</th>\n      <th>CloseBid</th>\n      <th>HighBid</th>\n      <th>LowBid</th>\n      <th>OpenAsk</th>\n      <th>CloseAsk</th>\n      <th>HighAsk</th>\n      <th>LowAsk</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Symbol</th>\n      <th>Date</th>\n      <th>Scatter</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2021-05-27 01:15:00</th>\n      <td>1504.57</td>\n      <td>1503.05</td>\n      <td>1504.76</td>\n      <td>1501.18</td>\n      <td>1505.93</td>\n      <td>1504.04</td>\n      <td>1507.20</td>\n      <td>1503.59</td>\n      <td>1505.250</td>\n      <td>1505.980</td>\n      <td>1502.385</td>\n      <td>1503.545</td>\n      <td>SOYF</td>\n      <td>2021-05-27</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2021-05-27 01:30:00</th>\n      <td>1503.05</td>\n      <td>1503.71</td>\n      <td>1503.96</td>\n      <td>1500.93</td>\n      <td>1504.04</td>\n      <td>1504.68</td>\n      <td>1506.20</td>\n      <td>1503.53</td>\n      <td>1503.545</td>\n      <td>1505.080</td>\n      <td>1502.230</td>\n      <td>1504.195</td>\n      <td>SOYF</td>\n      <td>2021-05-27</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2021-05-27 01:45:00</th>\n      <td>1503.71</td>\n      <td>1502.88</td>\n      <td>1505.05</td>\n      <td>1500.05</td>\n      <td>1504.68</td>\n      <td>1503.89</td>\n      <td>1506.83</td>\n      <td>1502.43</td>\n      <td>1504.195</td>\n      <td>1505.940</td>\n      <td>1501.240</td>\n      <td>1503.385</td>\n      <td>SOYF</td>\n      <td>2021-05-27</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2021-05-27 02:00:00</th>\n      <td>1502.88</td>\n      <td>1503.14</td>\n      <td>1504.28</td>\n      <td>1501.05</td>\n      <td>1503.89</td>\n      <td>1504.12</td>\n      <td>1506.58</td>\n      <td>1503.20</td>\n      <td>1503.385</td>\n      <td>1505.430</td>\n      <td>1502.125</td>\n      <td>1503.630</td>\n      <td>SOYF</td>\n      <td>2021-05-27</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2021-05-27 02:15:00</th>\n      <td>1503.14</td>\n      <td>1502.18</td>\n      <td>1503.70</td>\n      <td>1501.30</td>\n      <td>1504.12</td>\n      <td>1503.18</td>\n      <td>1505.83</td>\n      <td>1503.16</td>\n      <td>1503.630</td>\n      <td>1504.765</td>\n      <td>1502.230</td>\n      <td>1502.680</td>\n      <td>SOYF</td>\n      <td>2021-05-27</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2021-06-07 17:00:00</th>\n      <td>1573.51</td>\n      <td>1571.12</td>\n      <td>1574.48</td>\n      <td>1569.80</td>\n      <td>1574.49</td>\n      <td>1572.11</td>\n      <td>1576.70</td>\n      <td>1571.05</td>\n      <td>1574.000</td>\n      <td>1575.590</td>\n      <td>1570.425</td>\n      <td>1571.615</td>\n      <td>SOYF</td>\n      <td>2021-06-07</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2021-06-07 17:15:00</th>\n      <td>1571.13</td>\n      <td>1567.96</td>\n      <td>1572.26</td>\n      <td>1564.19</td>\n      <td>1572.11</td>\n      <td>1568.95</td>\n      <td>1574.34</td>\n      <td>1566.05</td>\n      <td>1571.620</td>\n      <td>1573.300</td>\n      <td>1565.120</td>\n      <td>1568.455</td>\n      <td>SOYF</td>\n      <td>2021-06-07</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2021-06-07 17:30:00</th>\n      <td>1567.47</td>\n      <td>1570.51</td>\n      <td>1571.16</td>\n      <td>1565.30</td>\n      <td>1568.94</td>\n      <td>1571.52</td>\n      <td>1573.20</td>\n      <td>1567.49</td>\n      <td>1568.205</td>\n      <td>1572.180</td>\n      <td>1566.395</td>\n      <td>1571.015</td>\n      <td>SOYF</td>\n      <td>2021-06-07</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2021-06-07 17:45:00</th>\n      <td>1570.54</td>\n      <td>1570.24</td>\n      <td>1572.51</td>\n      <td>1568.94</td>\n      <td>1571.52</td>\n      <td>1571.25</td>\n      <td>1574.96</td>\n      <td>1570.76</td>\n      <td>1571.030</td>\n      <td>1573.735</td>\n      <td>1569.850</td>\n      <td>1570.745</td>\n      <td>SOYF</td>\n      <td>2021-06-07</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2021-06-07 18:00:00</th>\n      <td>1570.23</td>\n      <td>1560.34</td>\n      <td>1572.43</td>\n      <td>1556.55</td>\n      <td>1571.21</td>\n      <td>1561.63</td>\n      <td>1574.83</td>\n      <td>1558.86</td>\n      <td>1570.720</td>\n      <td>1573.630</td>\n      <td>1557.705</td>\n      <td>1560.985</td>\n      <td>SOYF</td>\n      <td>2021-06-07</td>\n      <td>1557.705</td>\n    </tr>\n  </tbody>\n</table>\n<p>499 rows × 15 columns</p>\n</div>"
     },
     "metadata": {},
     "execution_count": 9
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "output_type": "error",
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'RESULTS/TEMP/498.png'",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-14-beaf6f55be42>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m fplt.plot(df.iloc[start:,:], type='candle',title=_ticker+' - '+label,ylabel='Price',figscale=1.1,  datetime_format='%d-%m-%Y',alines=_signals,addplot=_line_price,\\\n\u001b[0m\u001b[1;32m      2\u001b[0m                         savefig='RESULTS/TEMP/'+_pic)\n",
      "\u001b[0;32m~/anaconda3/envs/DataSciences/lib/python3.8/site-packages/mplfinance/plotting.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(data, **kwargs)\u001b[0m\n\u001b[1;32m    768\u001b[0m                 \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mbbox_inches\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'tight'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    769\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 770\u001b[0;31m                 \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    771\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mconfig\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'closefig'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;31m# True or 'auto'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    772\u001b[0m             \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.8/site-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36msavefig\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    857\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    858\u001b[0m     \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgcf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 859\u001b[0;31m     \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    860\u001b[0m     \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw_idle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m   \u001b[0;31m# need this if 'transparent=True' to reset colors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    861\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.8/site-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36msavefig\u001b[0;34m(self, fname, transparent, **kwargs)\u001b[0m\n\u001b[1;32m   2309\u001b[0m                 \u001b[0mpatch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_edgecolor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'none'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2310\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2311\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2312\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2313\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtransparent\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.8/site-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)\u001b[0m\n\u001b[1;32m   2208\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2209\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2210\u001b[0;31m                 result = print_method(\n\u001b[0m\u001b[1;32m   2211\u001b[0m                     \u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2212\u001b[0m                     \u001b[0mdpi\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdpi\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.8/site-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m   1637\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1638\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1639\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1640\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1641\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py\u001b[0m in \u001b[0;36mprint_png\u001b[0;34m(self, filename_or_obj, metadata, pil_kwargs, *args)\u001b[0m\n\u001b[1;32m    508\u001b[0m         \"\"\"\n\u001b[1;32m    509\u001b[0m         \u001b[0mFigureCanvasAgg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 510\u001b[0;31m         mpl.image.imsave(\n\u001b[0m\u001b[1;32m    511\u001b[0m             \u001b[0mfilename_or_obj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuffer_rgba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"png\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morigin\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"upper\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    512\u001b[0m             dpi=self.figure.dpi, metadata=metadata, pil_kwargs=pil_kwargs)\n",
      "\u001b[0;32m~/.local/lib/python3.8/site-packages/matplotlib/image.py\u001b[0m in \u001b[0;36mimsave\u001b[0;34m(fname, arr, vmin, vmax, cmap, format, origin, dpi, metadata, pil_kwargs)\u001b[0m\n\u001b[1;32m   1609\u001b[0m         \u001b[0mpil_kwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetdefault\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"format\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1610\u001b[0m         \u001b[0mpil_kwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetdefault\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"dpi\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mdpi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdpi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1611\u001b[0;31m         \u001b[0mimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mpil_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1612\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1613\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/DataSciences/lib/python3.8/site-packages/PIL/Image.py\u001b[0m in \u001b[0;36msave\u001b[0;34m(self, fp, format, **params)\u001b[0m\n\u001b[1;32m   2153\u001b[0m                 \u001b[0mfp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuiltins\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"r+b\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2154\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2155\u001b[0;31m                 \u001b[0mfp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuiltins\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"w+b\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2156\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2157\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'RESULTS/TEMP/498.png'"
     ]
    }
   ],
   "source": [
    "fplt.plot(df.iloc[start:,:], type='candle',title=_ticker+' - '+label,ylabel='Price',figscale=1.1,  datetime_format='%d-%m-%Y',alines=_signals,addplot=_line_price,\\\n",
    "                        savefig='RESULTS/TEMP/'+_pic)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "date\n",
       "2021-05-27 01:15:00    1503.545\n",
       "2021-05-27 01:30:00    1504.195\n",
       "2021-05-27 01:45:00    1503.385\n",
       "2021-05-27 02:00:00    1503.630\n",
       "2021-05-27 02:15:00    1502.680\n",
       "                         ...   \n",
       "2021-06-07 17:00:00    1571.615\n",
       "2021-06-07 17:15:00    1568.455\n",
       "2021-06-07 17:30:00    1571.015\n",
       "2021-06-07 17:45:00    1570.745\n",
       "2021-06-07 18:00:00    1560.985\n",
       "Name: Close, Length: 499, dtype: float64"
      ]
     },
     "metadata": {},
     "execution_count": 12
    }
   ],
   "source": [
    "price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}